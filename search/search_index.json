{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sequential Story MCP Server","text":"<p>A Model Context Protocol (MCP) server for Sequential Thinking and Sequential Story as mnemonic techniques for problem-solving.</p>"},{"location":"#overview","title":"Overview","text":"<p>This project offers two complementary MCP tools for structuring complex problems:</p> <ol> <li> <p>Sequential Story - A narrative-based approach to sequential thinking. Instead of tracking abstract thoughts, it structures problems as story elements with characters, settings, and plot developments to make them more memorable and engaging.</p> </li> <li> <p>Sequential Thinking - A pure Python port of the JavaScript implementation, eliminating Node.js dependencies</p> </li> </ol> <p>Both approaches leverage the power of sequencing and structure to enhance memory retention and problem understanding.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#sequential-story","title":"Sequential Story","text":"<ul> <li>Build problem solutions as narrative sequences</li> <li>Revise and branch story elements as needed</li> <li>Track characters, settings, tones, and plot points</li> <li>Formatted, color-coded display of story elements</li> </ul>"},{"location":"#sequential-thinking","title":"Sequential Thinking","text":"<ul> <li>Structure problems as a sequence of thoughts</li> <li>Revise or branch thinking paths as needed</li> <li>Generate and verify solution hypotheses</li> <li>Track thinking process completion</li> <li>Pure Python implementation (no Node.js required)</li> </ul>"},{"location":"#common-features","title":"Common Features","text":"<ul> <li>Formatted, color-coded display of elements</li> <li>Full MCP protocol support for integration with AI systems</li> <li>Support for branching and revision</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#during-development","title":"During Development","text":"<p>When working with the package locally before publishing:</p> <pre><code># Clone the repository\ngit clone https://github.com/dhkts1/sequentialStory\ncd sequentialStory\n\n# Install dependencies using uv\nuv venv\nsource .venv/bin/activate\nuv sync\n\n# Install with development dependencies\nuv sync --group dev\n</code></pre>"},{"location":"#installing-with-mcp","title":"Installing with MCP","text":"<pre><code># Install in the Claude desktop app\nmcp install -e . src/cli.py -n \"Sequential Story\"\n\n# Install with only the Sequential Thinking tool\nmcp install -e . src/cli.py -n \"Sequential Thinking\" --env-var \"TOOLS='[\\\"thinking\\\"]'\"\n\n# Install with only the Sequential Story tool explicitly\nmcp install -e . src/cli.py -n \"Sequential Story\" --env-var \"TOOLS='[\\\"story\\\"]'\"\n\n# Install with both tools\nmcp install -e . src/cli.py -n \"Sequential Tools\" --env-var \"TOOLS='[\\\"thinking\\\",\\\"story\\\"]'\"\n</code></pre> <p>For development:</p> <pre><code># For development with the MCP Inspector\nmcp dev src/__main__.py:main\n</code></pre> <p>You can also configure Claude desktop to use the tool with <code>uvx</code> by adding this to your Claude mcpServers.json:</p> <pre><code>\"mcpServers\": {\n  \"Sequential Story\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"sequential-story\"\n    ]\n  }\n}\n</code></pre> <p>The environment variable <code>TOOLS</code> controls which tools are enabled. By default, only the Sequential Story tool is enabled, but the Sequential Thinking tool can be added as needed.</p> <p>This is useful when you want to focus on a specific problem-solving approach or when integrating with other MCP tools. You can also update the environment variables directly in the Claude desktop app after installation.</p>"},{"location":"#example-story-element","title":"Example story element","text":"<pre><code>{\n  \"element\": \"Our protagonist, a data scientist named Alex, encounters a mysterious pattern in the customer behavior data.\",\n  \"elementNumber\": 1,\n  \"totalElements\": 5,\n  \"nextElementNeeded\": true,\n  \"character\": \"Alex (data scientist)\",\n  \"setting\": \"Data analysis lab\",\n  \"tone\": \"Mysterious\",\n  \"plotPoint\": \"Discovery of pattern\"\n}\n</code></pre>"},{"location":"#example-thought-element","title":"Example thought element","text":"<pre><code>{\n  \"thought\": \"The problem requires analyzing multiple data sources to identify correlations between customer behavior and sales patterns.\",\n  \"thoughtNumber\": 1,\n  \"totalThoughts\": 5,\n  \"nextThoughtNeeded\": true\n}\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code># Install pre-commit hooks\nuv run pre-commit install\n\n# Run all pre-commit checks\npoe pre\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This project builds on the concepts of sequential thinking and structured problem-solving, adapting these approaches to both analytical and narrative frameworks for enhanced memory and problem-solving.</p> <p>The Sequential Thinking implementation is a pure Python port inspired by the JavaScript implementation from the Model Context Protocol repositories: https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking</p>"}]}